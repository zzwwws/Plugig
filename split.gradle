buildscript {
    apply from: 'script.gradle', to: buildscript
}
apply from: 'utils.gradle'

import com.android.build.gradle.api.ApplicationVariant
import com.android.build.gradle.api.BaseVariant
import com.android.build.gradle.tasks.Dex
import com.android.build.gradle.tasks.PackageApplication

import static com.android.builder.model.AndroidProject.FD_INTERMEDIATES

ext{
    customizeSplitTask = {ApplicationVariant variant, Task task->
        customizeTasks(variant, task)
    }
}
//ext{
//    customizeSplit = this.&customizeTasks
//}

ext {
    CUSTOM_CLASSES = "${project.buildDir}/${FD_INTERMEDIATES}/custom-classes"
    CUSTOM_JAR = "${project.buildDir}/${FD_INTERMEDIATES}/custom-jar"
    CUSTOM_DEX = "${project.buildDir}/${FD_INTERMEDIATES}/custom-dex"
    CUSTOM_PLUGIN = "${project.buildDir}/${FD_INTERMEDIATES}/custom-plugin"
    CUSTOM_VERSION = "${project.buildDir}/${FD_INTERMEDIATES}/custom-version"
    CUSTOM_PACKAGE = "${project.buildDir}/${FD_INTERMEDIATES}/custom-package"
}

void customizeTasks(ApplicationVariant variant, Task task){
    if(task.name.equals("dex${variant.name.capitalize()}".toString())){
        handleDex(variant, task)
    }else if(task.name.equals("package${variant.name.capitalize()}".toString())){
        handlePackage(variant, task)
    }else if(task.name.equals("assemble${variant.name.capitalize()}".toString())){

    }
}

void handleDex(ApplicationVariant variant, Task task){

    Dex dex = (Dex)task

    Collection<String> excludes = new HashSet<>()

    Collection<File> libraries = new HashSet<File>(dex.libraries)

    Collection<Task> outputs = new ArrayList<>()

    handleMultiDex(variant, dex, outputs, excludes, libraries)
    // PLUGINS
    handlePluginDex(variant, dex, outputs, excludes, libraries)

    handleMainDex(variant, dex, outputs, excludes, libraries)

    dependsOn(dex, outputs)

}
void handleMultiDex(ApplicationVariant variant, Dex main, Collection<Task> outputs, Collection<String> excludes, Collection<File> libraries){
    // COMMON
    outputs.add(createMultiDexTask(variant, main, 'common', { Jar jar, Dex dex ->
        def INCLUDES = [
                "com/github/zzwwws/plugig/common/",
        ]

        jar.include(INCLUDES)

        excludes.addAll(INCLUDES)

        dex.doLast {
            copyDex(variant, dex, 2)
        }
    }))
}


void handleMainDex(ApplicationVariant variant, Dex dex, Collection<Task> outputs, Collection<String> excludes, Collection<File> libraries){
    // JAR
    Jar jar = createJarTask2(variant, 'main', dex)
    jar.exclude(excludes)

    // DEX
    dex.inputDir = null
    dex.inputFiles = new HashSet<File>()
    dex.inputFiles.add(jar.getArchivePath())
    dex.libraries = libraries

    copyDependsOn(dex, jar)

    outputs.add(jar)
}

void handlePluginDex(ApplicationVariant variant, Dex main, Collection<Task> outputs, Collection<String> excludes, Collection<File> libraries){
    if(modules.contains('A')){
        outputs.add(createPluginTaskEx(variant, main, 'A', excludes))
    }
    if(modules.contains('B')){
        outputs.add(createPluginTaskEx(variant, main, 'B', excludes))
    }
}
void copyDex(BaseVariant variant, Dex dex, int order) {
    copy {
        from new File(dex.outputFolder, "classes.dex")
        into file("${CUSTOM_PACKAGE}/${variant.dirName}")
        rename {
            "classes${order}.dex"
        }
    }
}

//
// MULTI DEX
//

Task createMultiDexTask(BaseVariant variant, Dex main, String id, Closure config) {
    // JAR
    Jar jar = createJarTask2(variant, id, main)

    // DEX
    Dex dex = createDexTask(variant, main, id)
    dex.inputFiles.add(jar.getArchivePath())

    chainDependsOn(dex, jar)

    copyDependsOn(main, jar)

    // CONFIG
    config(jar, dex)

    return dex
}
//
// dex helper
//

Jar createJarTask2(BaseVariant variant, String id, Dex dex) {
    File from = dex.inputDir
    boolean zip = false
    if (dex.inputFiles != null && !dex.inputFiles.isEmpty()) {
        from = dex.inputFiles.get(0)
        zip = true;
    }

    return createJarTask(variant, id, from, zip);
}

Dex createDexTask(BaseVariant variant, Dex dex, String id) {
    Dex task = tasks.create("dex${id.capitalize()}${variant.name.capitalize()}", Dex.class)

    //
    // BaseTask
    //

    copyBaseTask(dex, task)

    //
    // Dex
    //

    // disable
    task.enableIncremental = false
    task.optimize = false

    // copy
    task.additionalParameters = dex.additionalParameters
    task.dexOptions = dex.dexOptions
    task.tmpFolder = dex.tmpFolder

    // output
    task.outputFolder = file("${CUSTOM_DEX}/${variant.dirName}/$id")

    // input
    task.inputFiles = new HashSet<File>()
    task.libraries = new HashSet<File>()

    return task
}
//
// BASE
//

Jar createJarTask(BaseVariant variant, String id, File from, boolean zip) {
    Jar task = tasks.create("jar${id.capitalize()}${variant.name.capitalize()}", Jar.class)

    task.baseName = id
    task.from(zip ? zipTree(from) : from)
    task.destinationDir = file("${CUSTOM_JAR}/${variant.dirName}")
    return task
}

//
// PACKAGE
//

void handlePackage(ApplicationVariant variant, Task task) {
    PackageApplication pack = (PackageApplication) task

    Set<File> jars = new HashSet<File>(pack.packagedJars)
    pack.packagedJars = jars

    jars.add(file("${CUSTOM_PACKAGE}/${variant.dirName}/custom.jar"))

    println "package dexfold -> ${pack.dexFolder.path}"
    task.dependsOn(createPackageCustomTask(variant))
}

Task createPluginTaskEx(BaseVariant variant, Dex main, String id, Collection<String> excludes) {
    String include = "com/github/zzwwws/plugig/plugin/$id/"

    excludes.add(include)

    return createPluginTask(variant, main, id, { Jar jar, Dex dex ->
        jar.include(include)
    })
}

//
// PLUGIN
//

Task createPluginTask(BaseVariant variant, Dex main, String id, Closure config) {
    // JAR
    Jar jar = createJarTask2(variant, id, main)

    // DEX
    Dex dex = createDexTask(variant, main, id)
    dex.inputFiles.add(jar.getArchivePath())


    // PACKAGE
    Task pack = createPackagePluginTask(variant, dex, id)

    chainDependsOn(pack, dex, jar)

    copyDependsOn(main, jar)

    // CONFIG
    config(jar, dex)

    println "pluginDex-> ${dex.name} copy end"
    return pack
}

Task createPackagePluginTask(BaseVariant variant, Dex dex, String id) {
    Jar task = tasks.create("package${id.capitalize()}${variant.name.capitalize()}", Jar.class)

    task.baseName = id
    task.from(dex.outputFolder)
    println "dexoutput -> ${dex.outputFolder}"
    task.destinationDir = file("${CUSTOM_PACKAGE}/${variant.dirName}/assets/preload")

    task.doLast {
        ant.checksum(file: task.getArchivePath(), property: id)
        ant.propertyfile(file: new File(task.destinationDir, task.getArchiveName() + ".vfy")) {
            entry( key: "MD5", value: "${ant.properties[id]}")
        }
    }

    return task
}

Task createPackageCustomTask(BaseVariant variant) {
    Jar task = tasks.create("packageCustom${variant.name.capitalize()}", Jar.class)

    File base = file("${CUSTOM_PACKAGE}/${variant.dirName}")

    task.baseName = 'custom'
    task.from(base)
    task.destinationDir = base
    task.exclude('custom.jar')

    return task
}

void chainDependsOn(Task ... tasks) {
    for (int i = 1; i < tasks.length; i++) {
        tasks[i - 1].dependsOn(tasks[i])
    }
}

void copyDependsOn(Task base, Task task) {
    for (Object depend : base.dependsOn) {
        task.dependsOn(depend)
    }
}

void dependsOn(Task task, Collection<Task> tasks) {
    for (Task t : tasks) {
        task.dependsOn(t)
    }
}

